var net = require('net');
var common = require('common');
var crypto = require('crypto');
var parseURL = require('url').parse;
var createRouter = require('router').create;

var noop = function() {};

var START = '\u0000';
var END   = '\ufffd';

var Parser = common.emitter(function() {
	this.buffer = '';
	this.start = 0;
	this.framing = false;
	this.top = [];
});

Parser.prototype.parse = function(data) {
	var index = -1;
	var last = 0;
	
	this.top[0] = data[data.length-2] || this.top[1];
	this.top[1] = data[data.length-1];
		
	while ((index = data.indexOf(this.framing ? END : START, last)) > -1) { // messages are framed by START/END
		if (this.framing) {
			this.emit('message', this.buffer.substring(this.start)+data.substring(last, index));
			this.buffer = '';
		}
		
		this.start = last = index+1;
		this.framing = !this.framing;
	}
	if (this.top[0] === END && this.top[1] === START) { // websocket close handshake
		this.emit('close');
		return;
	}
	if (this.framing && last <= data.length) { // we only buffer is we absolutely have to
		this.buffer += data;
	}
};

var PING_INTERVAL = 60*1000;

var JSONSocket = common.emitter(function(socket) {
	var self = this;
	var parser = new Parser();
	
	this.socket = socket;
	this.buffer = [];
	
	socket.setEncoding('utf-8');
	socket.setTimeout(2*60*1000);
		
	if (socket.readyState === 'open') {
		this.send = this._send;
	} else {
		socket.on('connect', function() {
			self.send = self._send;
			while (self.buffer.length) {
				self._send(self.buffer.shift());
			}
			self.emit('open');
		});
	}
	
	var destroy = function() {
		socket.destroy();
	};
	var onclose = common.once(function() {
		self.onclose(); // internal signaling
		self.emit('close');
	});	

	parser.on('message', function(message) {
		if (message === 'ping') {
			self._write('pong');
			return;
		}
		if (message === 'pong') {
			return;
		}
		self.emit('message', JSON.parse(message));
	});
	parser.on('close', destroy);	

	socket.on('end', function() {
		socket.end();
	});

	socket.on('timeout', destroy);	
	socket.on('error', onclose);
	socket.on('close', onclose);
	
	socket.on('data', function(data) {
		parser.parse(data);
	});
});

JSONSocket.prototype.send = function(data) {
	this.buffer.push(data);
};
JSONSocket.prototype.end = function() {
	this.socket.end();
};
JSONSocket.prototype.destroy = function() {
	this.socket.destroy();
};
JSONSocket.prototype.ping = function() {
	var ping = setInterval(this._write.bind(this, 'ping'), PING_INTERVAL);

	this.onclose = function() {
		clearInterval(ping);
	};
};

JSONSocket.prototype.onclose = noop;


JSONSocket.prototype._send = function(data) {
	this._write(JSON.stringify(data));
};
JSONSocket.prototype._write = function(data) {
	var length = Buffer.byteLength(data);
	var message = new Buffer(2+length);
	
	message.write('\u0000', 'binary');
	message.write(data, 1, 'utf-8');
	message.write('\uffff', length+1, 'binary');

	this.socket.write(message); // we encourage the socket to send it as one package
};

var parse = function(host) {
	if (typeof host === 'object') {
		return host;
	}

	var match = (host || 'localhost').match(/([^:]+):?(\d*)/).slice(1);
	
	return {host:match[0], port:parseInt(match[1] || 10547, 10)};
};

exports.connect = function(host) {
	var socket;

	if (typeof host === 'string' && /\.sock$/.test(host)) {
		socket = net.createConnection(host);
	} else {
		host = parse(host);
		socket = net.createConnection(host.port, host.host);		
	}
	
	socket = new JSONSocket(socket);
	socket.ping();
	
	return socket;
};

exports.createServer = function(onsocket) {
	var server = net.createServer(function(socket) {
		onsocket(new JSONSocket(socket));
	});
	
	var that = {};
	
	that.listen = function(port, callback) {
		if (typeof port === 'function' || arguments.length === 0) {
			callback = port;
			port = 10547;
		}
		server.listen(port, callback);
	};
	that.close = function(callback) {
		server.close(callback);
	};
	
	return that;
};

// Browser interface

var onwebsocket = function(callback) {	
	// TODO: add protocal 6
	var sign = function(request, head) {
		var md5 = crypto.createHash('md5');
		var k1 = request.headers['sec-websocket-key1'];
		var k2 = request.headers['sec-websocket-key2'];

		[k1, k2].forEach(function(k){
			var n = parseInt(k.replace(/[^\d]/g, ''), 10);
			var spaces = k.replace(/[^ ]/g, '').length;

			if (spaces === 0 || n % spaces !== 0){
				return null;
			}
			n /= spaces;
			md5.update(String.fromCharCode(
				n >> 24 & 0xFF,
				n >> 16 & 0xFF,
				n >> 8  & 0xFF,
				n       & 0xFF));
		});
		md5.update(head.toString('binary'));
		return md5.digest('binary');	
	};

	return function(request, connection, head) {
		connection.setNoDelay(true);	

		var sec = 'sec-websocket-key1' in request.headers ? 'Sec-' : '';
		var token = sec && sign(request, head);

		if (token === null) {
			connection.destroy();
			return;
		}

		var handshake = [
			'HTTP/1.1 101 Web Socket Protocol Handshake', 
			'Upgrade: WebSocket', 
			'Connection: Upgrade',
			sec + 'WebSocket-Origin: ' + request.headers.origin || 'null',
			sec + 'WebSocket-Location: ws://' + request.headers.host + (request.realUrl || request.url)
		].join('\r\n');

		connection.write(handshake + '\r\n\r\n' + token, 'binary');	
		callback(connection);
	};
};

var TIMEOUT = 15000;

var LongPoll = common.emitter(function() {
	this._chunk = '';
	this._buffer = [];
	this._reader = this._pusher;
	this._destroyed = false;
	this._timeout = setTimeout(this.destroy.bind(this), TIMEOUT);
});

LongPoll.prototype.send = function(message) {
	this._reader(null, JSON.stringify(message));
};
LongPoll.prototype.destroy = function() {
	if (this._destroyed) {
		return;
	}
	clearTimeout(this._timeout);
	
	this._destroyed = true;
	this._reader(new Error('socket destroyed'));
	this.emit('close');
};

LongPoll.prototype.read = function(fn) {
	var self = this;
	var buffer = this._buffer;

	if (buffer.length) {		
		this._buffer = [];
		fn(null, buffer.join('\n')+'\n');
		return;
	}
	
	clearTimeout(this._timeout);
	
	this._reader = function(err, data) {
		self._timeout = setTimeout(self.destroy.bind(self), TIMEOUT);
		self._reader = self._pusher;
		fn(err, data);
	};
};
LongPoll.prototype.write = function(messages) {
	var self = this;
	
	messages = (this._chunk + messages).split('\n');

	this._chunk = messages.pop();
	
	messages.forEach(function(message) {
		if (message === 'ping') {
			self._reader(null, 'pong');
			return;
		}
		message = JSON.parse(message);
		self.emit('message', message);
	});
};

LongPoll.prototype._pusher = function(err, data) {
	if (err) {
		return;
	}
	this._buffer.push(data);
};

exports.listen = function(router, onsocket) {
	if (typeof router === 'number' || typeof router === 'string') {
		var port = router;
		
		router = exports.listen(createRouter(), onsocket);
		router.listen(port);
		
		return router;
	}
	var polls = {};

	router = createRouter(router);
	
	router.upgrade('/json-sockets', onwebsocket(function(connection) {
		onsocket(new JSONSocket(connection));
	}));

	var responder = function(query, response) {
		if (query.callback) {
			return function(status, data) {
				response.writeHead(200, {'content-type':'application/javascript; charset=utf=8'});
				response.end(query.callback+'('+JSON.stringify(data)+');');
			};
		}
		return function(status, data) {
			response.writeHead(status, {'access-control-allow-origin':'*', 'content-type':'text/plain; charset=utf-8'});
			response.end(data);
		};
	};

	router.get('/json-sockets/create', function(request, response) {
		var query = parseURL(request.url, true).query;
		var id = Math.random().toFixed(20).substring(2);	
		var lp = polls[id] = new LongPoll();
		var respond = responder(query, response);

		lp.on('close', function() {
			delete polls[id];
		});

		onsocket(lp);

		respond(200, id);
	});

	router.get('/json-sockets/read', function(request, response) {
		var query = parseURL(request.url, true).query;
		var socket = polls[query.id];

		var respond = responder(query, response);
		var onerror = function() {
			respond(404, '');
		};

		if (!socket) {
			onerror();
			return;
		}

		request.on('close', function() {
			socket.destroy();
		});

		socket.read(common.fork(onerror, function(data) {
			respond(200, data);
		}));
	});

	router.get('/json-sockets/write', function(request, response) {
		var query = parseURL(request.url, true).query;
		var respond = responder(query, response);
		var socket = polls[query.id];
		
		if (!socket) {
			respond(404, '');
			return;
		}
		
		socket.write(query.post);
		respond(200, 'ack');
	});
	router.post('/json-sockets/write', function(request, response) {
		var query = parseURL(request.url, true).query;
		var socket = polls[query.id];

		var onerror = function() {
			request.connection.destroy();
		};

		if (!socket) {
			onerror();
			return;
		}
		var buf = '';

		request.setEncoding('utf-8');
		request.on('data', function(data) {
			buf += data;
		});
		request.on('end', function() {
			if (polls[query.id]) {
				socket.write(buf);			
			}
			response.writeHead(200, {'access-control-allow-origin':'*', 'content-type':'text/plain'});
			response.end('ack');		
		});
	});
	
	return router;
};