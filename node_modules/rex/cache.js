var fs = require('fs');

var cache = {};
var watching = {};

var watch = function(file, callback) {
	if (!watching[file]) {
		watching[file] = [];

		fs.watchFile(file, function() {
			watching[file].forEach(function(callback) {
				callback();
			});
		});
	}

	watching[file].push(callback);

	return function() {
		watching[file].splice(watching[file].indexOf(callback), 1);

		if (!watching[file].length) {
			delete watching[file];
			fs.unwatchFile(file);
		}
	};
};
var onchange = function(files, callback) {
	files = files.map(function(file) {
		return watch(file, function() {
			callback();
			files.forEach(function(cancel) {
				cancel();
			})
		});
	});
};


exports.has = function(key) {
	return !!cache[key];
};
exports.put = function(key, dependencies, value) {
	cache[key] = value;

	onchange(dependencies, function() {
		delete cache[key];
	});

	return value;
};
exports.get = function(key) {
	return cache[key];
};
