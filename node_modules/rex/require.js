(function() {
	if (typeof require !== 'undefined') {
		return;
	}
	
	var modules = {};
	var links = {};
	var stash = [];

	var list = function() {
		var l = [];

		for (var id in modules) {
			l.push(id);
		}
		return l;
	};
	var pop = function() {
		return stash.pop();
	};
	var empty = function(map) {
		for (var i in map) {
			return false;
		}
		return true;
	};
	var entry = function(map, definition) {
		if (!definition) {
			for (var i in map) {
				links[i] = map[i];
			}
			return;
		}
		define(map, definition);
	};
	var define = function(map, definition) {
		var module = {exports:{}, browser:true};
		
		for (var i in map) {
			links[i] = links[i] || map[i];
		}
		definition(module, module.exports, resolver(map));
		
		return module.exports;
	};
	var defineModule = function(id, map, definition) {
		modules[id] = modules[id] || function(alias) {
			var exports;
			
			modules[id] = function() {
				return exports;
			};
			
			exports = define(map, definition);
			
			if (typeof exports === 'object' && empty(exports) && window[alias] && typeof window[alias].nodeName !== 'string') {
				exports = window[alias];
			}
			return exports;
		};
	};
	var resolve = function(map, path) {
		return modules[map[path]](path.match(/([^\/]*)$/g)[0].replace(/\.js$/i, ''));
	};
	var resolver = function(map) {
		var fn = function() {
			var exports = resolve(map, arguments[0]);

			for (var i = 1; i < arguments.length; i++) {
				resolve(map, arguments[i]);
			}
			return exports;
		};

		fn.push = function() {
			var module = fn.apply(null, arguments);

			stash.push(module);
			return module;
		};

		fn.pop = pop;
		fn.list = list;
		fn.define = defineModule;
		fn.entry = entry;

		return fn;
	};
	
	require = resolver(links);
})();
